diff --git a/inventory b/inventory
index 4beef0d..bc1c4b0 100644
--- a/inventory
+++ b/inventory
@@ -1,63 +1,36 @@
-# Please specify the ip addresses and connection settings for your environment
-# The specified ip addresses will be used to listen by the cluster components.
-# Attention! Specify private IP addresses so that the cluster does not listen a public IP addresses.
-# For deploying via public IPs, add 'ansible_host=public_ip_address' variable for each node.
-
-# "postgresql_exists='true'" if PostgreSQL is already exists and running
-# "hostname=" variable is optional (used to change the server name)
-# "new_node=true" to add a new server to an existing cluster using the add_pgnode.yml playbook
-
-# In this example, all components will be installed on PostgreSQL nodes.
-# You can deploy the haproxy balancers and the etcd or consul cluster on other dedicated servers (recomended).
-
-# if dcs_exists: false and dcs_type: "etcd"
-[etcd_cluster]  # recommendation: 3, or 5-7 nodes
-10.128.64.140
-10.128.64.142
-10.128.64.143
-
-# if dcs_exists: false and dcs_type: "consul"
-[consul_instances]  # recommendation: 3 or 5-7 nodes
-10.128.64.140 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=dc1
-10.128.64.142 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=dc1
-10.128.64.143 consul_node_role=server consul_bootstrap_expect=true consul_datacenter=dc1
-#10.128.64.144 consul_node_role=client consul_datacenter=dc1
-#10.128.64.145 consul_node_role=client consul_datacenter=dc2
-
-# if with_haproxy_load_balancing: true
+# etcd cluster nodes
+[etcd_cluster]
+10.0.10.2
+10.0.10.3
+10.0.10.4
+
 [balancers]
-10.128.64.140
-10.128.64.142
-10.128.64.143
-#10.128.64.144 new_node=true
+10.0.10.7
 
-# PostgreSQL nodes
+# PostgreSQL cluster nodes
 [master]
-10.128.64.140 hostname=pgnode01 postgresql_exists=false
+10.0.10.5 postgresql_exists=false
 
 [replica]
-10.128.64.142 hostname=pgnode02 postgresql_exists=false
-10.128.64.143 hostname=pgnode03 postgresql_exists=false
-#10.128.64.144 hostname=pgnode04 postgresql_exists=false new_node=true
+10.0.10.6 postgresql_exists=false
 
 [postgres_cluster:children]
 master
 replica
 
-# if pgbackrest_install: true and "repo_host" is set
-[pgbackrest]  # optional (Dedicated Repository Host)
-
 
 # Connection settings
 [all:vars]
 ansible_connection='ssh'
 ansible_ssh_port='22'
-ansible_user='root'
-ansible_ssh_pass='secretpassword'  # "sshpass" package is required for use "ansible_ssh_pass"
-#ansible_ssh_private_key_file=
+ansible_user='dkhabarov'
+#ansible_ssh_pass='secretpassword'  # "sshpass" package is required for use "ansible_ssh_pass"
+ansible_ssh_private_key_file=/home/dkhabarov/.ssh/dkhabarov-mtscloud
 #ansible_python_interpreter='/usr/bin/python3'  # is required for use python3
 
+# unused settings
 [pgbackrest:vars]
-ansible_user='postgres'
-ansible_ssh_pass='secretpassword'
 
+[consul_instances]
+
+[pgbackrest]
diff --git a/vars/main.yml b/vars/main.yml
index 9de0649..ca6a5db 100644
--- a/vars/main.yml
+++ b/vars/main.yml
@@ -27,7 +27,7 @@ synchronous_mode_strict: false  # if 'true' then block all client writes to the
 synchronous_node_count: 1  # number of synchronous standby databases
 
 # Load Balancing
-with_haproxy_load_balancing: false  # or 'true' if you want to install and configure the load-balancing
+with_haproxy_load_balancing: true  # or 'true' if you want to install and configure the load-balancing
 haproxy_listen_port:
   master: 5000
   replicas: 5001
@@ -149,6 +149,7 @@ postgresql_password_encryption_algorithm: "scram-sha-256"  # or "md5" if your cl
 # (optional) list of users to be created (if not already exists)
 postgresql_users:
   - { name: "{{ pgbouncer_auth_username }}", password: "{{ pgbouncer_auth_password }}", flags: "LOGIN", role: "" }
+  - { name: "weather-api-user", password: "weather-api-user-pass", flags: "NOSUPERUSER,NOCREATEDB,NOCREATEROLE,NOLOGIN" }
 #  - { name: "monitoring_auth_username", password: "monitoring_user_password", flags: "LOGIN", role: "pg_monitor" } # monitoring Service Account
 #  - { name: "mydb-user", password: "mydb-user-pass", flags: "SUPERUSER" }
 #  - { name: "", password: "", flags: "NOSUPERUSER" }
@@ -156,7 +157,9 @@ postgresql_users:
 #  - { name: "", password: "", flags: "NOLOGIN" }
 
 # (optional) list of databases to be created (if not already exists)
-postgresql_databases: []
+# postgresql_databases: []
+postgresql_databases:
+  - { db: "weather", encoding: "UTF8", lc_collate: "en_US.UTF-8", lc_ctype: "en_US.UTF-8", owner: "weather-api-user" }
 #  - { db: "mydatabase", encoding: "UTF8", lc_collate: "ru_RU.UTF-8", lc_ctype: "ru_RU.UTF-8", owner: "mydb-user" }
 #  - { db: "mydatabase2", encoding: "UTF8", lc_collate: "ru_RU.UTF-8", lc_ctype: "ru_RU.UTF-8", owner: "mydb-user", conn_limit: "50" }
 #  - { db: "", encoding: "UTF8", lc_collate: "en_US.UTF-8", lc_ctype: "en_US.UTF-8", owner: "" }
@@ -278,6 +281,7 @@ postgresql_pg_hba:
   - { type: "host", database: "all", user: "{{ pgbouncer_auth_username }}", address: "127.0.0.1/32", method: "trust" } # required for pgbouncer auth_user
   - { type: "host", database: "all", user: "all", address: "127.0.0.1/32", method: "{{ postgresql_password_encryption_algorithm }}" }
   - { type: "host", database: "all", user: "all", address: "::1/128", method: "{{ postgresql_password_encryption_algorithm }}" }
+  - { type: "host", database: "all", user: "all", address: "10.0.10.7/32", method: "{{ postgresql_password_encryption_algorithm }}" }
 #  - { type: "host", database: "mydatabase", user: "mydb-user", address: "192.168.0.0/24", method: "{{ postgresql_password_encryption_algorithm }}" }
 #  - { type: "host", database: "all", user: "all", address: "192.168.0.0/24", method: "ident", options: "map=main" }  # use pg_ident
 
@@ -295,7 +299,7 @@ postgresql_pgpass:
 
 
 # PgBouncer parameters
-pgbouncer_install: true  # or 'false' if you do not want to install and configure the pgbouncer service
+pgbouncer_install: false  # or 'false' if you do not want to install and configure the pgbouncer service
 pgbouncer_conf_dir: "/etc/pgbouncer"
 pgbouncer_log_dir: "/var/log/pgbouncer"
 pgbouncer_listen_addr: "0.0.0.0"
